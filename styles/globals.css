@import url("https://fonts.googleapis.com/css2?family=Play:wght@700&display=swap");
@tailwind base;
@tailwind components;
@tailwind utilities;

body {
  @apply bg-black overflow-y-hidden;
  zoom: 100%;
}

/*General Textbox Class*/
.text-label {
  @apply mb-2 block text-xs font-bold uppercase tracking-wide text-gray-700;
}
.text-box {
  @apply block w-full appearance-none rounded-md border border-gray-400 bg-white py-3 px-4 leading-tight text-gray-700 shadow-inner focus:border-gray-500  focus:outline-none;
}

@font-face {
  font-family: retropix;
  src: url("/font/retropix.ttf");
}
@font-face {
  font-family: boomgoesthedynamite-bold;
  src: url("/font/boomgoesthedynamite-bold.ttf");
}
@font-face {
  font-family: ogoby-bold;
  src: url("/font/ogoby-bold.ttf");
}

/* ScreenAdjustment.css */

.screen-adjustment {
  position: fixed;
  top: 0;
  left: 0;
  width: 100vw;
  height: 100vh;
  background-color: rgba(0, 0, 0);
  display: flex;
  justify-content: center;
  align-items: center;
  z-index: 1000;
}

.screen-adjustment.hidden {
  display: none;
}

.adjustment-content {
  background-color: #fff;
  width: 1920px;
  height: 1080px;
  padding: 20px;
  text-align: center;
  border-radius: 8px;
  border-color: red;
  border-width: 4px;
}

.adjustment-content button {
  color: #fff;
  padding: 10px 20px;
  border: none;
  border-radius: 4px;
  cursor: pointer;
}

/* Menu styling */
.circle {
  width: 75px;
  height: 75px;
  padding: 60px; /* Add padding to each circle */
  margin-left: 100px; /* Add margin to create a horizontal gap */
}

.circle:nth-child(odd) {
  transform: translateY(-250px); /* Increase the distance between circles */
}

.circle img {
  width: 100%;
  height: 100%;
  object-fit: cover;
  border: 5px solid white;
  border-radius: 50%;
  transition: filter 0.3s ease-in-out;
}

.circle:hover img {
  filter: blur(2px); /* Adjust blur amount as needed */
}

.container {
  display: flex;
  justify-content: center;
  align-items: center;
  padding-bottom: 150px;
  height: 100vb; /* Center the line vertically */
}

.text-with-stroke {
  -webkit-text-stroke: 2px black; /* WebKit-based browsers like Chrome and Safari */
  text-stroke: 5px black; /* Standard syntax */
  color: white; /* Fill color of the text */
}

.fade-out {
  animation: fadeOut 2s ease-in-out;
}

.transparent-overlay {
  position: fixed;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0); /* Initially transparent */
  transition: background-color 1s ease-in-out; /* Transition for background color */
  pointer-events: none; /* Allow clicks to pass through initially */
  z-index: -1; /* Set a lower z-index */
}

.fade-out-overlay {
  background-color: rgba(0, 0, 0); /* Semi-transparent black */
  pointer-events: auto; /* Enable clicks on the overlay */
  z-index: 1; /* Set a higher z-index */
}

@keyframes fadeOut {
  0% {
    opacity: 1;
  }
  100% {
    opacity: 0;
  }
}

/* In your CSS file */
.button-wrapper {
  display: flex;
  align-items: center;
  justify-content: center;
  position: relative;
}

/* Style for the loading GIF image */
.loading-image {
  width: 32px; /* Adjust the width as needed */
  height: 32px; /* Adjust the height as needed */
}

/* Example CSS for box containers */
.game-settings-container {
  border-radius: 10px; /* Rounded corners for the modal content */
  padding: 20px; /* Padding to create space inside the container */
}

.game-title-container {
  text-align: center; /* Center-align the title */
}

/* Example CSS for label and input container */
.volume-container {
  display: flex;
  align-items: center;
  margin-top: 20px;
}

.volume-label-container {
  flex: 1; /* Make the label container take available space */
  text-align: left; /* Right-align the label */
  padding-right: 20px; /* Add spacing between label and input */
}

.volume-slider-container {
  flex: 2; /* Make the input container take more space */
  /* Adjust the width as needed */
}

/* Rest of the CSS remains the same */

/* Style for the button container */
.button-container {
  text-align: center; /* Center-align the buttons */
  margin-top: 20px; /* Add margin above the buttons */
  display: flex; /* Use flexbox to control button spacing */
  justify-content: space-between; /* Add space between buttons */
}

/* Style for the individual buttons */
.close-button {
  background-color: #f83737; /* Background color for the button */
  color: #fff; /* Text color for the button */
  padding: 10px 20px; /* Padding for the button */
  border: none; /* Remove button border */
  border-radius: 5px; /* Rounded corners for the button */
  cursor: pointer; /* Add pointer cursor on hover */
  flex: 1; /* Equal width for each button within the container */
  margin: 0 5px; /* Add horizontal margin to create space between buttons */
}

/* Define keyframes for the fade-in animation */
@keyframes fadeIn {
  0% {
    opacity: 0;
  }
  100% {
    opacity: 1;
  }
}

/* Apply the fade-in animation to elements with the "fadeIn" class */
.fadeIn {
  animation: fadeIn 1s ease-in-out forwards;
}

/* Add this CSS to your component's CSS or a global CSS file */
@keyframes float {
  0% {
    transform: translateY(0);
  }
  50% {
    transform: translateY(-30px); /* Adjust the floating height as needed */
  }
  100% {
    transform: translateY(0);
  }
}

/* Apply the animation to the robot image */
.robot-image {
  animation: float 1.5s ease-in-out infinite; /* Adjust the duration and timing function as needed */
}

@keyframes flash {
  0% {
    background-color: rgba(255, 0, 0, 0.5); /* Red with 50% opacity */
  }
  50% {
    background-color: transparent; /* Change to your original background color */
  }
  100% {
    background-color: rgba(255, 0, 0, 0.5); /* Red with 50% opacity */
  }
}

.flash {
  animation: flash 0.5s ease 1; /* Adjust the duration as needed */
}

/* Gold border */
.border-gold {
  border-color: #ffd700; /* Gold color */
}

/* Silver border */
.border-silver {
  border-color: #c0c0c0; /* Silver color */
}

/* Bronze border */
.border-bronze {
  border-color: #cd7f32; /* Bronze color */
}

@keyframes swipe-left {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(-100%);
  }
}

@keyframes swipe-right {
  0% {
    transform: translateX(0);
  }
  100% {
    transform: translateX(100%);
  }
}
